<launch>
  <arg name="mav_name" default="pelican"/>
  <arg name="controller_name" default="vel"/>
  <arg name="world_name" default="basic"/>
  <arg name="enable_logging" default="false" />
  <arg name="enable_ground_truth" default="true" />
  <arg name="log_file" default="$(arg mav_name)" />
  <arg name="debug" default="false"/>
  <arg name="gui" default="true"/>
  <arg name="paused" default="true"/>
  <!-- The following line causes gzmsg and gzerr messages to be printed to the console
      (even when Gazebo is started through roslaunch) -->
  <arg name="verbose" default="false"/>

  <env name="GAZEBO_MODEL_PATH" value="${GAZEBO_MODEL_PATH}:$(find rotors_gazebo)/models:$(find ss_workshop)/models"/>
  <env name="GAZEBO_RESOURCE_PATH" value="${GAZEBO_RESOURCE_PATH}:$(find ss_workshop)/worlds:$(find rotors_gazebo)/resource:$(find rotors_gazebo)/models:$(find ss_workshop)/resources:$(find rotors_gazebo)/models"/>
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find ss_workshop)/worlds/$(arg world_name).world" />
    <arg name="debug" value="$(arg debug)" />
    <arg name="paused" value="$(arg paused)" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="verbose" value="$(arg verbose)"/>
  </include>


  <group ns="pelican">
    <include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
      <arg name="namespace" value="pelican"/>
      <arg name="mav_name" value="pelican"/>
      <arg name="model" value="$(find rotors_description)/urdf/mav_generic_odometry_sensor.gazebo" />
      <arg name="enable_logging" value="$(arg enable_logging)" />
      <arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
      <arg name="x" default="-1"/>
      <arg name="y" default="-1"/>
      <arg name="z" default="0.1"/>
    </include>

     <node name="position_controller_node" pkg="ss_workshop" type="ss_$(arg controller_name)_node" output="screen">      
      <rosparam command="load" file="$(find ss_workshop)/resources/$(arg controller_name)_$(arg mav_name).yaml" />
      <rosparam command="load" file="$(find rotors_gazebo)/resource/$(arg mav_name).yaml" />
      <remap from="odom_msg" to="odometry_sensor1/odometry" />
      <remap from="traj_msg" to="command/trajectory" />      
    </node>
<!-- 
    <node name="position_controller_node" pkg="rrc_control" type="$(arg controller_name)_position_controller_node" output="screen">      
      <rosparam command="load" file="$(find rrc_control)/resources/$(arg controller_name)_$(arg mav_name).yaml" />
      <rosparam command="load" file="$(find rrc_control)/resources/$(arg mav_name).yaml" />
      <remap from="odometry" to="odometry_sensor1/odometry" />
    </node>
 -->
    
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
  </group>
  <group ns="pelican_2">
    <include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
      <arg name="namespace" value="pelican_2"/>
      <arg name="mav_name" value="pelican"/>
      <arg name="model" value="$(find rotors_description)/urdf/mav_generic_odometry_sensor.gazebo" />
      <arg name="enable_logging" value="$(arg enable_logging)" />
      <arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
    </include>

     <node name="position_controller_node" pkg="ss_workshop" type="ss_$(arg controller_name)_node" output="screen">      
      <rosparam command="load" file="$(find ss_workshop)/resources/$(arg controller_name)_$(arg mav_name).yaml" />
      <rosparam command="load" file="$(find rotors_gazebo)/resource/$(arg mav_name).yaml" />
      <remap from="odom_msg" to="odometry_sensor1/odometry" />
      <remap from="traj_msg" to="command/trajectory" />      
    </node>
<!-- 
    <node name="position_controller_node" pkg="rrc_control" type="$(arg controller_name)_position_controller_node" output="screen">      
      <rosparam command="load" file="$(find rrc_control)/resources/$(arg controller_name)_$(arg mav_name).yaml" />
      <rosparam command="load" file="$(find rrc_control)/resources/$(arg mav_name).yaml" />
      <remap from="odometry" to="odometry_sensor1/odometry" />
    </node>
 -->
    
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
  </group>

  <param name="box0_desc" command="$(find xacro)/xacro --inorder '$(find ss_workshop)/models/urdf/box0.xacro' namespace:='box0' mass:=0.2" />  
  <node name="spawn_box0" pkg="gazebo_ros" type="spawn_model"
   args="-param box0_desc
         -urdf
         -x -1.0
         -y -1.00
         -z 0.05
         -model 'box0'"
   respawn="false" output="screen">
  </node>


</launch>